"""
Django settings for shop project.

Generated by 'django-admin startproject' using Django 5.1.8.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Intégration de Sentry pour la surveillance des erreurs
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

# Activer Sentry uniquement en développement pour le moment
# jusqu'à ce que nous résolvions les problèmes de déploiement
if os.environ.get('ENVIRONMENT') != 'production':
    # Configuration simplifiée de Sentry
    sentry_sdk.init(
        dsn="https://79ca8e1804a7469d16ace9b011ee0f83e04509265539956736.ingest.us.sentry.io/4509265545134080",
        integrations=[
            DjangoIntegration(),
        ],
        traces_sample_rate=0.5,
    )

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-d7kd8rj$0*ps41$3ny+%r5p^szqofj7@*mmc$=hsyfbhm#&_x7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '.railway.app']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'parfums',  # Notre application de boutique de parfums
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'shop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'shop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Configuration de la base de données
# Utiliser PostgreSQL en production (Railway) et SQLite en développement
if os.environ.get('DATABASE_URL'):
    # Configuration pour Railway avec PostgreSQL via URL complète
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.config(
            default=os.environ.get('DATABASE_URL'),
            conn_max_age=600,
        )
    }
elif os.environ.get('POSTGRES_USER') and os.environ.get('POSTGRES_PASSWORD'):
    # Configuration PostgreSQL avec paramètres spécifiques de Railway
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('POSTGRES_DB', 'railway'),  # Nom personnalisé par défaut
            'USER': os.environ.get('POSTGRES_USER', 'postgres'),     # Utilisateur personnalisé par défaut
            'PASSWORD': os.environ.get('POSTGRES_PASSWORD', ''),
            'HOST': os.environ.get('PGHOST', 'localhost'),
            'PORT': os.environ.get('PGPORT', '5432'),
        }
    }
else:
    # Configuration pour le développement local avec SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Dossiers supplémentaires où Django cherchera les fichiers statiques
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Simplification de la collecte des fichiers statiques en production
if os.environ.get('ENVIRONMENT') == 'production':
    # Désactiver le mode debug en production
    DEBUG = False
    # Configuration pour servir les fichiers statiques en production
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
    # S'assurer que les fichiers statiques sont créés même s'ils n'existent pas
    import os
    os.makedirs(str(STATIC_ROOT), exist_ok=True)
    # S'assurer que les fichiers statiques sont accessibles même en mode debug désactivé
    WHITENOISE_USE_FINDERS = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
